"""
Django settings for shido project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

import sentry_sdk
from corsheaders.defaults import default_headers
from decouple import config, Csv
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default="awesome_secret_key_here")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(), default='')

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# Application definition

INSTALLED_APPS = [
    'admin_interface',
    'colorfield',
    'crispy_forms',
    'crispy_bootstrap5',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'corsheaders',
    'rest_framework',
    'drf_yasg',
    'martor',
    'users',
    'apps',
    'apis',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# For silence the warning from django-admin-interface
X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019"]

ROOT_URLCONF = 'shido.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shido.wsgi.application'

CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', cast=Csv(), default='')

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if config('DATABASE_DEVELOPMENT', default=True, cast=bool):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': f"django.db.backends.{config('DATABASE_TYPE', default='postgresql')}",
            'NAME': config(
                'DATABASE_NAME',
                default='shido-database'),
            'USER': config(
                'DATABASE_USER',
                default='shido'),
            'PASSWORD': config(
                'DATABASE_PASSWORD',
                default='shido'),
            'HOST': config(
                'DATABASE_HOST',
                default='localhost'),
            'PORT': config(
                'DATABASE_PORT',
                default=''),
        }}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

if DEBUG:
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, "static"),
    )
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django crispy forms and template configuration

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# More Django settings
# https://docs.djangoproject.com/en/5.0/ref/settings/

CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', cast=bool, default=False)

SESSION_COOKIE_AGE = 86400  # Set the session cookie age to only 1 day (in seconds)

# Logging
# https://docs.djangoproject.com/en/5.0/topics/logging/

LOGS_FILE = 'logs/shido.log'
LOGS_FILE_MAX_SIZE = 1024 * 1024 * 10  # 10 MB
LOGS_FILE_MAX_BACKUPS = 20


# Check if logs directory exists, if not create it
if not os.path.exists('logs'):
    os.makedirs('logs')

# Create log file if doesn't exist
if not os.path.exists(LOGS_FILE):
    open(LOGS_FILE, 'w').close()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    'formatters': {
        'standard': {
            'format': '[%(asctime)s] {%(name)s:%(lineno)s} [%(levelname)s] - %(message)s',
            'datefmt': '%d-%m-%Y %H:%M:%S %z',
        },
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO' if not DEBUG else 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'production_log_file': {
            'level': 'INFO' if not DEBUG else 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOGS_FILE,
            'formatter': 'standard',
            # Clean log after server restart if DEBUG is True
            'mode': 'w' if DEBUG else 'a',
        },
        'debug_log_file': {
            'level': 'INFO' if not DEBUG else 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_FILE,
            'maxBytes': LOGS_FILE_MAX_SIZE,
            'backupCount': LOGS_FILE_MAX_BACKUPS,
            'formatter': 'standard',
            # Clean log after server restart if DEBUG is True
            'mode': 'w' if DEBUG else 'a'
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'debug_log_file'],
            'level': 'INFO' if not DEBUG else 'DEBUG',
            'propagate': True
        } if DEBUG else {
            'handlers': ['console', 'production_log_file'],
            'level': 'INFO' if not DEBUG else 'DEBUG',
            'propagate': True
        },
        "django": {
            "handlers": ["console", "mail_admins", 'debug_log_file'],
            "level": "INFO",
        } if DEBUG else {
            "handlers": ["console", "mail_admins", 'production_log_file'],
            "level": "INFO",
        },
        "django.server": {
            "handlers": ["django.server", 'debug_log_file'],
            "level": "INFO",
            "propagate": False,
        } if DEBUG else {
            "handlers": ["django.server", 'production_log_file'],
            "level": "INFO",
            "propagate": False,
        }
    }
}

# Django email backend configuration
# https://docs.djangoproject.com/en/4.2/topics/email

ENABLE_EMAIL = config('ENABLE_EMAIL', cast=bool, default=False)

EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_PORT = config('EMAIL_PORT', cast=int, default=25)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=False)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', cast=bool, default=False)

if ENABLE_EMAIL:
    EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
else:
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = BASE_DIR / "emails"

# Sentry Integration
# https://docs.sentry.io/platforms/python/integrations/django/

if config('ENABLE_SENTRY', cast=bool, default=False):
    sentry_sdk.init(
        dsn=config('SENTRY_DSN', default=''),
        enable_tracing=True,
        # Send PII data to Sentry
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=config('SENTRY_TRACES_SAMPLE_RATE', cast=float, default=1.0),
        # TODO: Versioning when production version plan is ready
        integrations=[
            DjangoIntegration(
                # make Sentry use URL path as transaction name instead of view function name
                transaction_style='url',
                # Track middleware performance
                middleware_spans=True,
                # Track Django signal performance (for example of signal, see signals.py in users app)
                # This will be used more in the future like sending email when on event, etc.
                signals_spans=True,
                # See how many cache hits/misses there are
                cache_spans=False
            )
        ]
    )


# Django CORS Headers configuration
# https://github.com/adamchainz/django-cors-headers

CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', cast=bool, default=False)
CORS_TRUSTED_ORIGINS = config('CORS_TRUSTED_ORIGINS', cast=Csv(), default='')
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', cast=Csv(), default='')
CORS_ALLOW_HEADERS = (
    *default_headers,
    "x-client-id",
    "x-client-secret",
    "x-session-token",
    # Sentry frontend
    "baggage",
    "sentry-trace"
)

# Martor settings
# https://github.com/agusmakmun/django-markdown-editor

# Choices are: "semantic", "bootstrap"
MARTOR_THEME = 'bootstrap'

# Global martor settings
# Input: string boolean, `true/false`
MARTOR_ENABLE_CONFIGS = {
    'emoji': 'true',        # to enable/disable emoji icons.
    'imgur': 'true',        # to enable/disable imgur/custom uploader.
    'mention': 'false',     # to enable/disable mention
    'jquery': 'true',       # to include/revoke jquery (require for admin default django)
    'living': 'false',      # to enable/disable live updates in preview
    'spellcheck': 'false',  # to enable/disable spellcheck in form textareas
    'hljs': 'true',         # to enable/disable hljs highlighting in preview
}

# To show the toolbar buttons
MARTOR_TOOLBAR_BUTTONS = [
    'bold', 'italic', 'horizontal', 'heading', 'pre-code',
    'blockquote', 'unordered-list', 'ordered-list',
    'link', 'emoji',
    'toggle-maximize', 'help'
]

# To setup the martor editor with title label or not (default is False)
MARTOR_ENABLE_LABEL = False

# Disable admin style when using custom admin interface e.g django-grappelli (default is True)
MARTOR_ENABLE_ADMIN_CSS = True

# Markdownify
MARTOR_MARKDOWNIFY_FUNCTION = 'martor.utils.markdownify' # default
MARTOR_MARKDOWNIFY_URL = '/martor/markdownify/' # default

# Delay in milliseconds to update editor preview when in living mode.
MARTOR_MARKDOWNIFY_TIMEOUT = 0 # update the preview instantly

# Markdown extensions (default)
MARTOR_MARKDOWN_EXTENSIONS = [
    'markdown.extensions.extra',
    'markdown.extensions.nl2br',
    'markdown.extensions.smarty',
    'markdown.extensions.fenced_code',
    'markdown.extensions.sane_lists',

    # Custom markdown extensions.
    'martor.extensions.urlize',
    'martor.extensions.del_ins',      # ~~strikethrough~~ and ++underscores++
    'martor.extensions.mention',      # to parse markdown mention
    'martor.extensions.emoji',        # to parse markdown emoji
    'martor.extensions.mdx_video',    # to parse embed/iframe video
    'martor.extensions.escape_html',  # to handle the XSS vulnerabilities
]

# Markdown Extensions Configs
MARTOR_MARKDOWN_EXTENSION_CONFIGS = {}

# If you need to use your own themed "bootstrap" or "semantic ui" dependency
# replace the values with the file in your static files dir
MARTOR_ALTERNATIVE_JS_FILE_THEME = "semantic-themed/semantic.min.js"   # default None
MARTOR_ALTERNATIVE_CSS_FILE_THEME = "semantic-themed/semantic.min.css" # default None
MARTOR_ALTERNATIVE_JQUERY_JS_FILE = "jquery/dist/jquery.min.js"        # default None

# URL schemes that are allowed within links
ALLOWED_URL_SCHEMES = [
    "file", "ftp", "ftps", "http", "https", "irc", "mailto",
    "sftp", "ssh", "tel", "telnet", "tftp", "vnc", "xmpp",
]

# https://gist.github.com/mrmrs/7650266
ALLOWED_HTML_TAGS = [
    "a", "abbr", "b", "blockquote", "br", "cite", "code", "command",
    "dd", "del", "dl", "dt", "em", "fieldset", "h1", "h2", "h3", "h4", "h5", "h6",
    "hr", "i", "iframe", "img", "input", "ins", "kbd", "label", "legend",
    "li", "ol", "optgroup", "option", "p", "pre", "small", "span", "strong",
    "sub", "sup", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "u", "ul"
]

# https://github.com/decal/werdlists/blob/master/html-words/html-attributes-list.txt
ALLOWED_HTML_ATTRIBUTES = [
    "alt", "class", "color", "colspan", "datetime",  # "data",
    "height", "href", "id", "name", "reversed", "rowspan",
    "scope", "src", "style", "title", "type", "width"
]


# Check this setting is not set else csrf will not be sent over ajax calls
CSRF_COOKIE_HTTPONLY = False